{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isStarted","setIsStarted","isReversed","setIsReversed","NONE","sortType","setSortType","map","good","index","goodName","id","preparedGoods","goods","visibleGoods","ALPABET","sort","a","b","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","cn","onClick","prevState","ReactDOM","render","document","getElementById"],"mappings":"6KAsBKA,E,oEAlBCC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAQGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KA6CE,IAAME,EAAU,WACrB,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAgCJ,mBAASH,EAASQ,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgBP,mBAAgCF,EA1CnCU,KAAI,SAACC,EAAMC,GACtB,MAAO,CACLC,SAAUF,EACVG,GAAIF,OAyCFG,EApCR,SACEC,EACAR,EACAH,GAEA,IAAMY,EAAY,YAAOD,GAEzB,OAAQR,GACN,KAAKT,EAASmB,QACZD,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAChBD,EAAEP,SAASS,cAAcD,EAAER,aAE7B,MAEF,KAAKd,EAASwB,OACZN,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAChBD,EAAEP,SAASW,OAASH,EAAER,SAASW,UAInC,KAAKzB,EAASQ,MAKhB,OAAOF,EACHY,EAAaQ,UACbR,EASkBS,CAFtB,oBAIElB,EACAH,GAGF,OACE,qBAAKsB,UAAU,MAAf,SACE,qBAAKA,UAAU,MAAf,SACIxB,EAgBE,qCACE,sBAAKwB,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IACE,SACA,CAAE,uBAAwBrB,IAAaT,EAASmB,UAGpDY,QAAS,kBAAOrB,EAAYV,EAASmB,UARvC,iCAaA,wBACEU,KAAK,SACLD,UACEE,IACE,SACA,CAAE,uBAAwBrB,IAAaT,EAASwB,SAGpDO,QAAS,kBAAOrB,EAAYV,EAASwB,SARvC,4BAaA,wBACEK,KAAK,SACLD,UACEE,IACE,SACA,CAAE,uBAAwBxB,IAG9ByB,QAAS,kBAAMxB,GAAc,SAAAyB,GAAS,OACnCA,MATL,qBAeA,wBACEH,KAAK,SACLD,UACEE,IACE,kBACA,CACE,uBAAwC,IAAfxB,GACrBG,IAAaT,EAASQ,OAIhCuB,QAAS,WACPxB,GAAc,GACdG,EAAYV,EAASQ,OAbzB,sBAoBF,oBAAIoB,UACFE,IAAG,aAAc,CACf,YAAa1B,IAFjB,SAMGY,EAAcL,KAAI,SAAAC,GAAI,OACrB,oBAEEgB,UAAU,cAFZ,SAIGhB,EAAKE,UAHDF,EAAKG,YArFlB,wBACEc,KAAK,SACLD,UAAU,wCAMVG,QAAS,kBAAO1B,GAAa,IAR/B,wBCjFZ4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3e9b2f87.chunk.js","sourcesContent":["import { FC, useState } from 'react';\nimport './App.css';\nimport cn from 'classnames';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface Good {\n  goodName: string,\n  id: number,\n}\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\nconst getGoodsWithId = (initialGoods: string[]) => (\n  initialGoods.map((good, index) => {\n    return {\n      goodName: good,\n      id: index,\n    };\n  })\n);\n\nfunction getReorderedGoods(\n  goods: Good[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPABET:\n      visibleGoods.sort((a, b) => (\n        a.goodName.localeCompare(b.goodName)\n      ));\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((a, b) => (\n        a.goodName.length - b.goodName.length\n      ));\n      break;\n\n    case SortType.NONE:\n    default:\n      break;\n  }\n\n  return isReversed\n    ? visibleGoods.reverse()\n    : visibleGoods;\n}\n\nexport const App: FC = () => {\n  const [isStarted, setIsStarted] = useState(false);\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [goods] = useState<Good[]>(getGoodsWithId(goodsFromServer));\n\n  const preparedGoods = getReorderedGoods(\n    goods,\n    sortType,\n    isReversed,\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"box\">\n        {!isStarted\n          ? (\n            <button\n              type=\"button\"\n              className=\"\n                    button\n                    is-primary\n                    is-large\n                    is-light\n                  \"\n              onClick={() => (setIsStarted(true))}\n            >\n              Start\n            </button>\n          )\n          : (\n            <>\n              <div className=\"buttons\">\n                <button\n                  type=\"button\"\n                  className={\n                    cn(\n                      'button',\n                      { 'is-active is-primary': sortType === SortType.ALPABET },\n                    )\n                  }\n                  onClick={() => (setSortType(SortType.ALPABET))}\n                >\n                  Sort alphabetically\n                </button>\n\n                <button\n                  type=\"button\"\n                  className={\n                    cn(\n                      'button',\n                      { 'is-active is-primary': sortType === SortType.LENGTH },\n                    )\n                  }\n                  onClick={() => (setSortType(SortType.LENGTH))}\n                >\n                  Sort by length\n                </button>\n\n                <button\n                  type=\"button\"\n                  className={\n                    cn(\n                      'button',\n                      { 'is-active is-primary': isReversed },\n                    )\n                  }\n                  onClick={() => setIsReversed(prevState => (\n                    !prevState\n                  ))}\n                >\n                  Reverse\n                </button>\n\n                <button\n                  type=\"button\"\n                  className={\n                    cn(\n                      'button is-light',\n                      {\n                        'is-active is-danger': ((isReversed === false)\n                        && (sortType === SortType.NONE)),\n                      },\n                    )\n                  }\n                  onClick={() => {\n                    setIsReversed(false);\n                    setSortType(SortType.NONE);\n                  }}\n                >\n                  Reset\n                </button>\n              </div>\n\n              <ul className={\n                cn('Goods list', {\n                  'list-open': isStarted,\n                })\n              }\n              >\n                {preparedGoods.map(good => (\n                  <li\n                    key={good.id}\n                    className=\"Goods__item\"\n                  >\n                    {good.goodName}\n                  </li>\n                ))}\n              </ul>\n            </>\n          )}\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}